"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3,title:"Clustering"},l=void 0,i={unversionedId:"extra-features/clustering",id:"extra-features/clustering",title:"Clustering",description:"This feature has not been fully tested. Therefore I wouldn't really recommend it for production use yet. But it does work pretty good \ud83d\ude05. It uses Supercluster under the hood.",source:"@site/docs/extra-features/clustering.md",sourceDirName:"extra-features",slug:"/extra-features/clustering",permalink:"/react-native-web-maps/extra-features/clustering",draft:!1,editUrl:"https://github.com/teovillanueva/react-native-web-maps/tree/main/docs/docs/extra-features/clustering.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Clustering"},sidebar:"tutorialSidebar",previous:{title:"Geojson \u2705",permalink:"/react-native-web-maps/support/geojson"}},s={},u=[{value:"Props",id:"props",level:2},{value:"Types",id:"types",level:2},{value:"Example",id:"example",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This feature has not been fully tested. Therefore I wouldn't really recommend it for production use yet. But it does work pretty good \ud83d\ude05. It uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mapbox/supercluster"},"Supercluster")," under the hood."),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Prop"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"region")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Region")),(0,a.kt)("td",{parentName:"tr",align:null},"The region being displayed by the map")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"children")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.ReactElement[]")),(0,a.kt)("td",{parentName:"tr",align:null},"All childs must be of type ",(0,a.kt)("inlineCode",{parentName:"td"},"<Marker />"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"renderCluster")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(props: ClusterProps<{}>) => JSX.Element;")),(0,a.kt)("td",{parentName:"tr",align:null},"This is optional, if you want you can leave it blank and the default cluster component will be rendered")))),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// #ref: https://github.com/react-native-maps/react-native-maps/blob/master/index.d.ts#L24\ninterface Region {\n  latitude: number;\n  longitude: number;\n  latitudeDelta: number;\n  longitudeDelta: number;\n}\n\ntype ClusterProps<P extends object = {}> = {\n  pointCount: number;\n  pointCountAbbreviated: number | string;\n  coordinate: LatLng;\n  expansionZoom: number;\n} & P;\n")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ClusterProps, MarkerClusterer } from '@teovilla/react-native-web-maps';\n\nconst POINTS = [\n  {\n    latitude: 59.33956246905637,\n    longitude: 18.050015441134114,\n  },\n  {\n    latitude: 59.3442016958775,\n    longitude: 18.038256636812825,\n  },\n];\n\nfunction MyClusterComponent(props: ClusterProps<{ onPress(): void }>) {\n  return (\n    <Marker\n      onPress={props.onPress}\n      coordinate={props.coordinate}\n      anchor={{ x: 0.5, y: 0.5 }}\n    >\n      <View style={styles.cluster}>\n        <Text style={styles.clusterText}>{props.pointCountAbbreviated}</Text>\n      </View>\n    </Marker>\n  );\n}\n\nexport default function ClusteringExample() {\n  const [region, setRegion] = useState<Region | null>(null);\n\n  const mapRef = useRef<MapView>(null);\n\n  return (\n    <MapView\n      ref={mapRef}\n      onRegionChange={setRegion}\n      // ... other props\n    >\n      <MarkerClusterer\n        region={region}\n        renderCluster={(cluster) => (\n          <MyClusterComponent\n            {...cluster}\n            onPress={() =>\n              mapRef.current?.animateCamera({\n                center: cluster.coordinate,\n                zoom: cluster.expansionZoom + 3,\n              })\n            }\n          />\n        )}\n      >\n        {POINTS.map((point, idx) => (\n          <Marker key={idx} coordinate={point} />\n        ))}\n      </MarkerClusterer>\n    </MapView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  cluster: {\n    backgroundColor: 'salmon',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 20,\n    height: 20,\n    borderRadius: 999,\n  },\n  clusterText: {\n    fontWeight: '700',\n  },\n});\n")))}d.isMDXComponent=!0}}]);